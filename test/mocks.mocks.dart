// Mocks generated by Mockito 5.4.4 from annotations
// in location_flutter_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:location_flutter_app/app/features/friends/domain/entities/friend_model.dart'
    as _i9;
import 'package:location_flutter_app/app/features/friends/domain/repository/friends_repository.dart'
    as _i8;
import 'package:location_flutter_app/app/features/locations/domain/entities/location_model.dart'
    as _i6;
import 'package:location_flutter_app/app/features/locations/domain/repository/locations_repository.dart'
    as _i3;
import 'package:location_flutter_app/app/features/locations/presentation/state/location_validation_service.dart'
    as _i7;
import 'package:location_flutter_app/app/shared/error/failure.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationsRepository extends _i1.Mock
    implements _i3.LocationsRepository {
  MockLocationsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addLocation(
          _i6.LocationModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLocation,
          [location],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addLocation,
            [location],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>
      getAllLocation() => (super.noSuchMethod(
            Invocation.method(
              #getAllLocation,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.LocationModel>>(
              this,
              Invocation.method(
                #getAllLocation,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>
      getFavoriteLocations() => (super.noSuchMethod(
            Invocation.method(
              #getFavoriteLocations,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.LocationModel>>(
              this,
              Invocation.method(
                #getFavoriteLocations,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> toggleFavoriteStatus(
    int? locationId,
    bool? isFavorite,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleFavoriteStatus,
          [
            locationId,
            isFavorite,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #toggleFavoriteStatus,
            [
              locationId,
              isFavorite,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [LocationValidationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationValidationService extends _i1.Mock
    implements _i7.LocationValidationService {
  MockLocationValidationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<String, bool> validateUniqueName(
    String? name,
    List<_i6.LocationModel>? existingLocations,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateUniqueName,
          [
            name,
            existingLocations,
          ],
        ),
        returnValue: _FakeEither_0<String, bool>(
          this,
          Invocation.method(
            #validateUniqueName,
            [
              name,
              existingLocations,
            ],
          ),
        ),
      ) as _i2.Either<String, bool>);

  @override
  _i2.Either<String, bool> validateUniqueCoordinates(
    double? latitude,
    double? longitude,
    List<_i6.LocationModel>? existingLocations,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateUniqueCoordinates,
          [
            latitude,
            longitude,
            existingLocations,
          ],
        ),
        returnValue: _FakeEither_0<String, bool>(
          this,
          Invocation.method(
            #validateUniqueCoordinates,
            [
              latitude,
              longitude,
              existingLocations,
            ],
          ),
        ),
      ) as _i2.Either<String, bool>);

  @override
  _i2.Either<String, bool> validateWithinRadius(
    double? latitude,
    double? longitude,
    List<_i6.LocationModel>? existingLocations, {
    double? radius = 500.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateWithinRadius,
          [
            latitude,
            longitude,
            existingLocations,
          ],
          {#radius: radius},
        ),
        returnValue: _FakeEither_0<String, bool>(
          this,
          Invocation.method(
            #validateWithinRadius,
            [
              latitude,
              longitude,
              existingLocations,
            ],
            {#radius: radius},
          ),
        ),
      ) as _i2.Either<String, bool>);

  @override
  _i2.Either<String, bool> validatePhotoLimit(
    List<String>? photos, {
    int? maxPhotos = 3,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validatePhotoLimit,
          [photos],
          {#maxPhotos: maxPhotos},
        ),
        returnValue: _FakeEither_0<String, bool>(
          this,
          Invocation.method(
            #validatePhotoLimit,
            [photos],
            {#maxPhotos: maxPhotos},
          ),
        ),
      ) as _i2.Either<String, bool>);
}

/// A class which mocks [FriendsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendsRepository extends _i1.Mock implements _i8.FriendsRepository {
  MockFriendsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i9.FriendModel>>> getAllFriends() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllFriends,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i9.FriendModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i9.FriendModel>>(
          this,
          Invocation.method(
            #getAllFriends,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i9.FriendModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addFriend(
          _i9.FriendModel? friend) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFriend,
          [friend],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addFriend,
            [friend],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteFriend(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFriend,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteFriend,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> assignLocationToFriend(
    int? friendId,
    int? locationId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #assignLocationToFriend,
          [
            friendId,
            locationId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #assignLocationToFriend,
            [
              friendId,
              locationId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>
      getLocationsForFriend(int? friendId) => (super.noSuchMethod(
            Invocation.method(
              #getLocationsForFriend,
              [friendId],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.LocationModel>>(
              this,
              Invocation.method(
                #getLocationsForFriend,
                [friendId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.LocationModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i9.FriendModel>>>
      getFriendForLocation(int? locationId) => (super.noSuchMethod(
            Invocation.method(
              #getFriendForLocation,
              [locationId],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i9.FriendModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i9.FriendModel>>(
              this,
              Invocation.method(
                #getFriendForLocation,
                [locationId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i9.FriendModel>>>);
}
